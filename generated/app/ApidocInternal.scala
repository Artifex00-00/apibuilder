/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.9.11
 * apidoc:0.9.11 http://www.apidoc.me/gilt/apidoc-internal/0.9.11/play_2_x_json
 */
package com.gilt.apidoc.internal.v0.models {

  sealed trait Task

  case class DiffVersionTask(
    versionA: _root_.java.util.UUID,
    versionB: _root_.java.util.UUID
  ) extends Task

  case class IndexVersionTask(
    versionGuid: _root_.java.util.UUID
  ) extends Task

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Task, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class TaskUndefinedType(
    description: String
  ) extends Task

}

package com.gilt.apidoc.internal.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.gilt.apidoc.internal.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsApidocinternalDiffVersionTask: play.api.libs.json.Reads[DiffVersionTask] = {
      (
        (__ \ "version_a").read[_root_.java.util.UUID] and
        (__ \ "version_b").read[_root_.java.util.UUID]
      )(DiffVersionTask.apply _)
    }

    implicit def jsonWritesApidocinternalDiffVersionTask: play.api.libs.json.Writes[DiffVersionTask] = {
      (
        (__ \ "version_a").write[_root_.java.util.UUID] and
        (__ \ "version_b").write[_root_.java.util.UUID]
      )(unlift(DiffVersionTask.unapply _))
    }

    implicit def jsonReadsApidocinternalIndexVersionTask: play.api.libs.json.Reads[IndexVersionTask] = {
      (__ \ "version_guid").read[_root_.java.util.UUID].map { x => new IndexVersionTask(versionGuid = x) }
    }

    implicit def jsonWritesApidocinternalIndexVersionTask: play.api.libs.json.Writes[IndexVersionTask] = new play.api.libs.json.Writes[IndexVersionTask] {
      def writes(x: IndexVersionTask) = play.api.libs.json.Json.obj(
        "version_guid" -> play.api.libs.json.Json.toJson(x.versionGuid)
      )
    }

    implicit def jsonReadsApidocinternalTask: play.api.libs.json.Reads[Task] = {
      (
        (__ \ "index_version_task").read(jsonReadsApidocinternalIndexVersionTask).asInstanceOf[play.api.libs.json.Reads[Task]]
        orElse
        (__ \ "diff_version_task").read(jsonReadsApidocinternalDiffVersionTask).asInstanceOf[play.api.libs.json.Reads[Task]]
      )
    }

    implicit def jsonWritesApidocinternalTask: play.api.libs.json.Writes[Task] = new play.api.libs.json.Writes[Task] {
      def writes(obj: Task) = obj match {
        case x: com.gilt.apidoc.internal.v0.models.IndexVersionTask => play.api.libs.json.Json.obj("index_version_task" -> jsonWritesApidocinternalIndexVersionTask.writes(x))
        case x: com.gilt.apidoc.internal.v0.models.DiffVersionTask => play.api.libs.json.Json.obj("diff_version_task" -> jsonWritesApidocinternalDiffVersionTask.writes(x))
        case x: com.gilt.apidoc.internal.v0.models.TaskUndefinedType => sys.error(s"The type[com.gilt.apidoc.internal.v0.models.TaskUndefinedType] should never be serialized")
      }
    }
  }
}

package com.gilt.apidoc.internal.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.gilt.apidoc.internal.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}