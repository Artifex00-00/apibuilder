/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.9.11
 * apidoc:0.9.11 http://www.apidoc.me/gilt/apidoc-internal/0.9.11/play_2_x_json
 */
package com.gilt.apidoc.internal.v0.models {

  sealed trait Difference

  sealed trait TaskData

  /**
   * Represents a single change from one version of a service to another
   */
  case class Change(
    guid: _root_.java.util.UUID,
    fromVersion: com.gilt.apidoc.internal.v0.models.ChangeVersion,
    toVersion: com.gilt.apidoc.internal.v0.models.ChangeVersion,
    difference: com.gilt.apidoc.internal.v0.models.Difference
  )

  /**
   * Represents a simpler model of a version specifically for the use case of
   * displaying changes
   */
  case class ChangeVersion(
    guid: _root_.java.util.UUID,
    version: String
  )

  case class DifferenceBreaking(
    description: String
  ) extends Difference

  case class DifferenceNonBreaking(
    description: String
  ) extends Difference

  /**
   * Represents a reference to another model.
   */
  case class Reference(
    guid: _root_.java.util.UUID
  )

  case class Task(
    guid: _root_.java.util.UUID,
    data: com.gilt.apidoc.internal.v0.models.TaskData,
    numberAttempts: Long = 0,
    lastError: _root_.scala.Option[String] = None
  )

  case class TaskDataDiffVersion(
    oldVersionGuid: _root_.java.util.UUID,
    newVersionGuid: _root_.java.util.UUID
  ) extends TaskData

  case class TaskDataIndexVersion(
    versionGuid: _root_.java.util.UUID
  ) extends TaskData

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Difference, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class DifferenceUndefinedType(
    description: String
  ) extends Difference

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union TaskData, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class TaskDataUndefinedType(
    description: String
  ) extends TaskData

}

package com.gilt.apidoc.internal.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.gilt.apidoc.internal.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsApidocinternalChange: play.api.libs.json.Reads[Change] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "from_version").read[com.gilt.apidoc.internal.v0.models.ChangeVersion] and
        (__ \ "to_version").read[com.gilt.apidoc.internal.v0.models.ChangeVersion] and
        (__ \ "difference").read[com.gilt.apidoc.internal.v0.models.Difference]
      )(Change.apply _)
    }

    implicit def jsonWritesApidocinternalChange: play.api.libs.json.Writes[Change] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "from_version").write[com.gilt.apidoc.internal.v0.models.ChangeVersion] and
        (__ \ "to_version").write[com.gilt.apidoc.internal.v0.models.ChangeVersion] and
        (__ \ "difference").write[com.gilt.apidoc.internal.v0.models.Difference]
      )(unlift(Change.unapply _))
    }

    implicit def jsonReadsApidocinternalChangeVersion: play.api.libs.json.Reads[ChangeVersion] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "version").read[String]
      )(ChangeVersion.apply _)
    }

    implicit def jsonWritesApidocinternalChangeVersion: play.api.libs.json.Writes[ChangeVersion] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "version").write[String]
      )(unlift(ChangeVersion.unapply _))
    }

    implicit def jsonReadsApidocinternalDifferenceBreaking: play.api.libs.json.Reads[DifferenceBreaking] = {
      (__ \ "description").read[String].map { x => new DifferenceBreaking(description = x) }
    }

    implicit def jsonWritesApidocinternalDifferenceBreaking: play.api.libs.json.Writes[DifferenceBreaking] = new play.api.libs.json.Writes[DifferenceBreaking] {
      def writes(x: DifferenceBreaking) = play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.Json.toJson(x.description)
      )
    }

    implicit def jsonReadsApidocinternalDifferenceNonBreaking: play.api.libs.json.Reads[DifferenceNonBreaking] = {
      (__ \ "description").read[String].map { x => new DifferenceNonBreaking(description = x) }
    }

    implicit def jsonWritesApidocinternalDifferenceNonBreaking: play.api.libs.json.Writes[DifferenceNonBreaking] = new play.api.libs.json.Writes[DifferenceNonBreaking] {
      def writes(x: DifferenceNonBreaking) = play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.Json.toJson(x.description)
      )
    }

    implicit def jsonReadsApidocinternalReference: play.api.libs.json.Reads[Reference] = {
      (__ \ "guid").read[_root_.java.util.UUID].map { x => new Reference(guid = x) }
    }

    implicit def jsonWritesApidocinternalReference: play.api.libs.json.Writes[Reference] = new play.api.libs.json.Writes[Reference] {
      def writes(x: Reference) = play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.Json.toJson(x.guid)
      )
    }

    implicit def jsonReadsApidocinternalTask: play.api.libs.json.Reads[Task] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "data").read[com.gilt.apidoc.internal.v0.models.TaskData] and
        (__ \ "number_attempts").read[Long] and
        (__ \ "last_error").readNullable[String]
      )(Task.apply _)
    }

    implicit def jsonWritesApidocinternalTask: play.api.libs.json.Writes[Task] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "data").write[com.gilt.apidoc.internal.v0.models.TaskData] and
        (__ \ "number_attempts").write[Long] and
        (__ \ "last_error").writeNullable[String]
      )(unlift(Task.unapply _))
    }

    implicit def jsonReadsApidocinternalTaskDataDiffVersion: play.api.libs.json.Reads[TaskDataDiffVersion] = {
      (
        (__ \ "old_version_guid").read[_root_.java.util.UUID] and
        (__ \ "new_version_guid").read[_root_.java.util.UUID]
      )(TaskDataDiffVersion.apply _)
    }

    implicit def jsonWritesApidocinternalTaskDataDiffVersion: play.api.libs.json.Writes[TaskDataDiffVersion] = {
      (
        (__ \ "old_version_guid").write[_root_.java.util.UUID] and
        (__ \ "new_version_guid").write[_root_.java.util.UUID]
      )(unlift(TaskDataDiffVersion.unapply _))
    }

    implicit def jsonReadsApidocinternalTaskDataIndexVersion: play.api.libs.json.Reads[TaskDataIndexVersion] = {
      (__ \ "version_guid").read[_root_.java.util.UUID].map { x => new TaskDataIndexVersion(versionGuid = x) }
    }

    implicit def jsonWritesApidocinternalTaskDataIndexVersion: play.api.libs.json.Writes[TaskDataIndexVersion] = new play.api.libs.json.Writes[TaskDataIndexVersion] {
      def writes(x: TaskDataIndexVersion) = play.api.libs.json.Json.obj(
        "version_guid" -> play.api.libs.json.Json.toJson(x.versionGuid)
      )
    }

    implicit def jsonReadsApidocinternalDifference: play.api.libs.json.Reads[Difference] = {
      (
        (__ \ "difference_breaking").read(jsonReadsApidocinternalDifferenceBreaking).asInstanceOf[play.api.libs.json.Reads[Difference]]
        orElse
        (__ \ "difference_non_breaking").read(jsonReadsApidocinternalDifferenceNonBreaking).asInstanceOf[play.api.libs.json.Reads[Difference]]
      )
    }

    implicit def jsonWritesApidocinternalDifference: play.api.libs.json.Writes[Difference] = new play.api.libs.json.Writes[Difference] {
      def writes(obj: Difference) = obj match {
        case x: com.gilt.apidoc.internal.v0.models.DifferenceBreaking => play.api.libs.json.Json.obj("difference_breaking" -> jsonWritesApidocinternalDifferenceBreaking.writes(x))
        case x: com.gilt.apidoc.internal.v0.models.DifferenceNonBreaking => play.api.libs.json.Json.obj("difference_non_breaking" -> jsonWritesApidocinternalDifferenceNonBreaking.writes(x))
        case x: com.gilt.apidoc.internal.v0.models.DifferenceUndefinedType => sys.error(s"The type[com.gilt.apidoc.internal.v0.models.DifferenceUndefinedType] should never be serialized")
      }
    }

    implicit def jsonReadsApidocinternalTaskData: play.api.libs.json.Reads[TaskData] = {
      (
        (__ \ "task_data_index_version").read(jsonReadsApidocinternalTaskDataIndexVersion).asInstanceOf[play.api.libs.json.Reads[TaskData]]
        orElse
        (__ \ "task_data_diff_version").read(jsonReadsApidocinternalTaskDataDiffVersion).asInstanceOf[play.api.libs.json.Reads[TaskData]]
      )
    }

    implicit def jsonWritesApidocinternalTaskData: play.api.libs.json.Writes[TaskData] = new play.api.libs.json.Writes[TaskData] {
      def writes(obj: TaskData) = obj match {
        case x: com.gilt.apidoc.internal.v0.models.TaskDataIndexVersion => play.api.libs.json.Json.obj("task_data_index_version" -> jsonWritesApidocinternalTaskDataIndexVersion.writes(x))
        case x: com.gilt.apidoc.internal.v0.models.TaskDataDiffVersion => play.api.libs.json.Json.obj("task_data_diff_version" -> jsonWritesApidocinternalTaskDataDiffVersion.writes(x))
        case x: com.gilt.apidoc.internal.v0.models.TaskDataUndefinedType => sys.error(s"The type[com.gilt.apidoc.internal.v0.models.TaskDataUndefinedType] should never be serialized")
      }
    }
  }
}

package com.gilt.apidoc.internal.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.gilt.apidoc.internal.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}