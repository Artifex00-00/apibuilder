#!/usr/bin/env ruby

# Transitions 100% traffic for the specified project onto its latest version

project = ARGV.shift.to_s.strip
if project == ""
  raise "need project"
end

class Version

  attr_reader :major, :minor, :micro

  def initialize(v)
    @major, @minor, @micro = v.split(".").map(&:strip).map(&:to_i)
  end

  def <=>(other)
    value = major <=> other.major
    if value == 0
      value = minor <=> other.minor
      if value == 0
        value = micro <=> other.micro
      end
    end
    value
  end

  def to_s
    "%s.%s.%s" % [major, minor, micro]
  end

end

class Instance

  CREATE_COMPLETE = "CREATE_COMPLETE"

  attr_reader :name, :status, :version, :load, :domain, :service

  # Example:
  # { :status=>"CREATE_COMPLETE", :version=>"0.3.1", :load=>"api-0-3-1-ElasticL-81C962H1HWJT-1464525772.us-east-1.elb.amazonaws.com", :domain=>"api.origin.apidoc.me", :service=>"api", :balancer=>"54.208.76.150", :instances=>nil, :name=>"api-0-3-1-api-origin-apidoc-me" }
  def initialize(opts={})
    @name = opts.delete(:name)
    @status = opts.delete(:status)
    v = opts.delete(:version)
    @version = v ? Version.new(v) : nil
    @load = opts.delete(:load)
    @domain = opts.delete(:domain)
    @service = opts.delete(:service)
  end

  def created?
    @status == CREATE_COMPLETE
  end

  def healthcheck_url
    "http://%s/_internal_/healthcheck" % @load
  end

  def healthy?
    cmd = "curl --silent #{healthcheck_url}"
    result = `#{cmd}`.strip
    result == "healthy"
  end

  def <=>(other)
    if other.version.to_s == @version.to_s
      0

    elsif other.nil? || other.version.nil?
      1

    elsif version.nil?
      -1

    else
      @version.<=>(other.version)
    end
  end

end

def run(cmd)
  puts cmd
  system(cmd)
end

def ionblaster_list(cmd)
  puts cmd
  headers = nil
  instances = []
  `#{cmd}`.strip.split("\n").each do |cmd|
    next if cmd.match(/^\s/)
    parts = cmd.strip.split.map(&:strip)

    if parts.first == "VERSION"
      headers = parts.map(&:downcase).map(&:to_sym)

    elsif headers
      rec = {}
      headers.each_with_index do |name, i|
        rec[headers[i]] = parts[i]
      end
      instances << Instance.new(rec)

    else
      raise "Cannot parse line: %s" % cmd
    end
  end

  instances
end

versions = ionblaster_list("ionblaster list #{project}").select { |v| v.created? }.sort.reverse
if latest_healthy_version = versions.find { |v| v.healthy? }
  run("ionblaster traffic %s %s 100" % [project, latest_healthy_version.version.to_s])
else
  puts "%s: No healthy versions found" % project
end
