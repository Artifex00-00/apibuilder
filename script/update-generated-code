#!/usr/bin/env ruby

def get_service_url
  urls = ['http://www.apidoc.me', 'http://localhost:9000']

  puts "Select apidoc URL (defaults to 1): "
  urls.each_with_index do |url, i|
    puts "  #{i + 1}: #{url}"
  end

  input = gets.to_s.strip
  index = input.to_i - 1
  if index >= 0
    if selection = urls[index]
      return selection
    end
  end
  puts ""
  get_service_url
end

ORG = "gilt"
SERVICE_URL = ARGV.shift || get_service_url

def download(service_name, map)
  downloads = {}
  map.each do |target, path|
    tmpfile = "/tmp/download-#{service_name}-#{target}.tmp"
    cmd = "curl --silent #{SERVICE_URL}/#{ORG}/#{service_name}/latest/#{target} > #{tmpfile}"
    puts cmd
    system(cmd)

    contents = IO.read(tmpfile).strip
    if contents == "" || contents.match(/<html>/)
      raise " --> Error downloading URL"
    end

    diff = `diff #{tmpfile} #{path}`.strip
    if diff == ""
      puts " --> Unchanged"
    else
      downloads[tmpfile] = path
    end
  end
    
  downloads.map do |tmp, path|
    "cp #{tmp} #{path}"
  end
end

subprojects = {
  "apidoc" => {
    "ruby_client" => "client-tests/ruby_client.rb",
    "play_2_3_client" => "generated/app/ApidocClient.scala",
    "play_2_x_routes" => "api/conf/routes"
  },
  "apidoc-spec" => {
    "play_2_3_client" => "generated/app/ApidocSpec.scala"
  },
  "apidoc-generator" => {
    "play_2_3_client" => "generated/app/ApidocGenerator.scala"
  }
}

commands = subprojects.map do |name, data|
  download(name, data)
end.flatten

commands.each do |command|
  puts command
  system(command)
end

