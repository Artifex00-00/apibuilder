Tasks:
  - Migrate tasks for changes
  - Implement authorization in items and changes daos

Add search to apidoc

VersionsDao
  - make isDeleted default to None
  - add isDeleted to all findAll methods

Expose permission check at www/app/views/generators/details.scala.html for removing a generator

Consider supporting (from swagger):
  - add license, info, documentation. Remove description from top level (replaced with info.description)
  - parameter locations: header, cookie
  - add headers to response object

Think about:
  - replace base_url with urls which would be an array of [ url, description ]
  - add authentication object support from swagger spec

Generators:
  - Cache the generators

UX:

  - On adding watch, check subscription and offer the user to enable
    the relevant subscriptions if not subscribed

  - On service visibility - if service is public and org is NOT, add
    note that the service will not be visible until the org is made
    public.

Ability to diff two versions of a service, producing a human readable
output of the changes. Use this as the basis for determining backwards
incompatible changes.

Org level setting to enable semver versioning (default on)
  - prevent backwards incompatible changes once at major version 1

Implement backwards compatibility layer - each new version of a
service should be automatically validated against the latest version
with the same major version number. Consider if we require semver
versioning or not.

Automate end to tests of generated clients. Currently client libraries
are tested offline and manually. Need to think through how testing
will work across mulitple platforms.

