api/api.json
  => Import spec/service
  => change type of "service" from object to service

Add support for ning async client 1.9.10
  https://github.com/AsyncHttpClient/async-http-client/blob/master/MIGRATION.md
    - Rename xxxParameter (add, set, get...) into xxxFormParam
    - Rename xxxQueryParameter (add, set, get...) into xxxQueryParam

https://github.com/gilt/apidoc/pull/281/files
  --> Apply to new ning client in apidoc-generator

review the option[xxx] syntax to declare types and see if we want to
announce that in the release or if we should wait
  if we keep, we probably need to remove option from:
  /web/apidoc/lib/src/main/scala/Datatype.scala

ruby client generator:
  -- add support for union types

Breaking changes:
  - Change 404s to be explicit

Generators:
  - Cache the generators

users:
  - add nickname that users can modify, and display that nickname throughout the API

UX:

  - On adding watch, check subscription and offer the user to enable
    the relevant subscriptions if not subscribed

  - On service visibility - if service is public and org is NOT, add
    note that the service will not be visible until the org is made
    public.

Ability to diff two versions of a service, producing a human readable
output of the changes. Use this as the basis for determining backwards
incompatible changes.

Org level setting to enable semver versioning (default on)
  - prevent backwards incompatible changes once at major version 1

Email user when their membership request has been processed

Implement subscriptions.findAll authorization filter

Add user_form to api.json and remove db.UserDao.UserForm

Implement backwards compatibility layer - each new version of a
service should be automatically validated against the latest version
with the same major version number. Consider if we require semver
versioning or not.

Automate end to tests of generated clients. Currently client libraries
are tested offline and manually. Need to think through how testing
will work across mulitple platforms.
  
api.json: Support authentication, documentation
  
Swagger 2.0 was released in September 2014. Explore if swagger 2.0 can become the input spec for apidoc.
