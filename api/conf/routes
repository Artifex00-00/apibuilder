POST       /domains/:orgKey                                controllers.Domains.post(orgKey: String)
DELETE     /domains/:orgKey/:name                          controllers.Domains.deleteByName(orgKey: String, name: String)
GET        /generators                                     controllers.Generators.get(guid: scala.Option[_root_.java.util.UUID], key: scala.Option[String], limit: Int ?= 100, offset: Int ?= 0)
GET        /generators/:key                                controllers.Generators.getByKey(key: String)
POST       /generators                                     controllers.Generators.post()
PUT        /generators/:key                                controllers.Generators.putByKey(key: String)
DELETE     /generators/:key                                controllers.Generators.deleteByKey(key: String)
GET        /_internal_/healthcheck                         controllers.Healthchecks.get()
GET        /membership_requests                            controllers.MembershipRequests.get(org_guid: scala.Option[_root_.java.util.UUID], org_key: scala.Option[String], user_guid: scala.Option[_root_.java.util.UUID], role: scala.Option[String], limit: Int ?= 25, offset: Int ?= 0)
POST       /membership_requests                            controllers.MembershipRequests.post()
POST       /membership_requests/:guid/accept               controllers.MembershipRequests.postAcceptByGuid(guid: _root_.java.util.UUID)
POST       /membership_requests/:guid/decline              controllers.MembershipRequests.postDeclineByGuid(guid: _root_.java.util.UUID)
GET        /memberships                                    controllers.Memberships.get(org_guid: scala.Option[_root_.java.util.UUID], org_key: scala.Option[String], user_guid: scala.Option[_root_.java.util.UUID], role: scala.Option[String], limit: Int ?= 25, offset: Int ?= 0)
GET        /memberships/:guid                              controllers.Memberships.getByGuid(guid: _root_.java.util.UUID)
DELETE     /memberships/:guid                              controllers.Memberships.deleteByGuid(guid: _root_.java.util.UUID)
PUT        /organizations/:key/metadata                    controllers.OrganizationMetadata.put(key: String)
GET        /organizations                                  controllers.Organizations.get(guid: scala.Option[_root_.java.util.UUID], user_guid: scala.Option[_root_.java.util.UUID], key: scala.Option[String], name: scala.Option[String], limit: Int ?= 25, offset: Int ?= 0)
GET        /organizations/:key                             controllers.Organizations.getByKey(key: String)
POST       /organizations                                  controllers.Organizations.post()
DELETE     /organizations/:key                             controllers.Organizations.deleteByKey(key: String)
GET        /subscriptions                                  controllers.Subscriptions.get(guid: scala.Option[_root_.java.util.UUID], organization_key: scala.Option[String], user_guid: scala.Option[_root_.java.util.UUID], publication: scala.Option[com.gilt.apidoc.models.Publication], limit: Int ?= 25, offset: Int ?= 0)
GET        /subscriptions/:guid                            controllers.Subscriptions.getByGuid(guid: _root_.java.util.UUID)
POST       /subscriptions                                  controllers.Subscriptions.post()
DELETE     /subscriptions/:guid                            controllers.Subscriptions.deleteByGuid(guid: _root_.java.util.UUID)
GET        /users                                          controllers.Users.get(guid: scala.Option[_root_.java.util.UUID], email: scala.Option[String], token: scala.Option[String])
GET        /users/:guid                                    controllers.Users.getByGuid(guid: _root_.java.util.UUID)
POST       /users/authenticate                             controllers.Users.postAuthenticate()
POST       /users                                          controllers.Users.post()
PUT        /users/:guid                                    controllers.Users.putByGuid(guid: _root_.java.util.UUID)
POST       /validations                                    controllers.Validations.post()
GET        /:orgKey/:serviceKey/:version/:generatorKey     controllers.Code.getByOrgKeyAndServiceKeyAndVersionAndGeneratorKey(orgKey: String, serviceKey: String, version: String, generatorKey: String)
GET        /:orgKey                                        controllers.Services.getByOrgKey(orgKey: String, name: scala.Option[String], key: scala.Option[String], limit: Int ?= 25, offset: Int ?= 0)
PUT        /:orgKey/:serviceKey                            controllers.Services.putByOrgKeyAndServiceKey(orgKey: String, serviceKey: String)
DELETE     /:orgKey/:serviceKey                            controllers.Services.deleteByOrgKeyAndServiceKey(orgKey: String, serviceKey: String)
GET        /:orgKey/:serviceKey                            controllers.Versions.getByOrgKeyAndServiceKey(orgKey: String, serviceKey: String, limit: Int ?= 25, offset: Int ?= 0)
GET        /:orgKey/:serviceKey/:version                   controllers.Versions.getByOrgKeyAndServiceKeyAndVersion(orgKey: String, serviceKey: String, version: String)
PUT        /:orgKey/:serviceKey/:version                   controllers.Versions.putByOrgKeyAndServiceKeyAndVersion(orgKey: String, serviceKey: String, version: String)
DELETE     /:orgKey/:serviceKey/:version                   controllers.Versions.deleteByOrgKeyAndServiceKeyAndVersion(orgKey: String, serviceKey: String, version: String)