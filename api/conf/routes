# Generated by apidoc - http://www.apidoc.me
# apidoc:0.7.39 http://localhost:9000/gilt/apidoc/0.7.40/play_2_x_routes

POST       /domains/:orgKey                                    controllers.Domains.postByOrgKey(orgKey: String)
DELETE     /domains/:orgKey/:name                              controllers.Domains.deleteByOrgKeyAndName(orgKey: String, name: String)
POST       /email_verification_confirmations                   controllers.EmailVerificationConfirmationForms.postEmailVerificationConfirmations()
GET        /generators                                         controllers.Generators.get(guid: _root_.scala.Option[_root_.java.util.UUID], key: _root_.scala.Option[String], limit: Long ?= 100, offset: Long ?= 0)
GET        /generators/:key                                    controllers.Generators.getByKey(key: String)
POST       /generators                                         controllers.Generators.post()
PUT        /generators/:key                                    controllers.Generators.putByKey(key: String)
DELETE     /generators/:key                                    controllers.Generators.deleteByKey(key: String)
GET        /_internal_/healthcheck                             controllers.Healthchecks.getInternalAndHealthcheck()
GET        /memberships                                        controllers.Memberships.get(org_guid: _root_.scala.Option[_root_.java.util.UUID], org_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], role: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /memberships/:guid                                  controllers.Memberships.getByGuid(guid: _root_.java.util.UUID)
DELETE     /memberships/:guid                                  controllers.Memberships.deleteByGuid(guid: _root_.java.util.UUID)
GET        /membership_requests                                controllers.MembershipRequests.get(org_guid: _root_.scala.Option[_root_.java.util.UUID], org_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], role: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
POST       /membership_requests                                controllers.MembershipRequests.post()
POST       /membership_requests/:guid/accept                   controllers.MembershipRequests.postAcceptByGuid(guid: _root_.java.util.UUID)
POST       /membership_requests/:guid/decline                  controllers.MembershipRequests.postDeclineByGuid(guid: _root_.java.util.UUID)
GET        /organizations                                      controllers.Organizations.get(guid: _root_.scala.Option[_root_.java.util.UUID], user_guid: _root_.scala.Option[_root_.java.util.UUID], key: _root_.scala.Option[String], name: _root_.scala.Option[String], namespace: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /organizations/:key                                 controllers.Organizations.getByKey(key: String)
POST       /organizations                                      controllers.Organizations.post()
PUT        /organizations/:key                                 controllers.Organizations.putByKey(key: String)
DELETE     /organizations/:key                                 controllers.Organizations.deleteByKey(key: String)
POST       /password_resets                                    controllers.PasswordResets.post()
POST       /password_reset_requests                            controllers.PasswordResetRequests.post()
GET        /subscriptions                                      controllers.Subscriptions.get(guid: _root_.scala.Option[_root_.java.util.UUID], organization_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], publication: _root_.scala.Option[com.gilt.apidoc.v0.models.Publication], limit: Long ?= 25, offset: Long ?= 0)
GET        /subscriptions/:guid                                controllers.Subscriptions.getByGuid(guid: _root_.java.util.UUID)
POST       /subscriptions                                      controllers.Subscriptions.post()
DELETE     /subscriptions/:guid                                controllers.Subscriptions.deleteByGuid(guid: _root_.java.util.UUID)
GET        /users                                              controllers.Users.get(guid: _root_.scala.Option[_root_.java.util.UUID], email: _root_.scala.Option[String], token: _root_.scala.Option[String])
GET        /users/:guid                                        controllers.Users.getByGuid(guid: _root_.java.util.UUID)
POST       /users/authenticate                                 controllers.Users.postAuthenticate()
POST       /users                                              controllers.Users.post()
PUT        /users/:guid                                        controllers.Users.putByGuid(guid: _root_.java.util.UUID)
POST       /validations                                        controllers.Validations.post()
GET        /watches                                            controllers.Watches.get(guid: _root_.scala.Option[_root_.java.util.UUID], user_guid: _root_.scala.Option[_root_.java.util.UUID], organization_key: _root_.scala.Option[String], application_key: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
GET        /watches/:guid                                      controllers.Watches.getByGuid(guid: _root_.java.util.UUID)
GET        /watches/check                                      controllers.Watches.getCheck(user_guid: _root_.scala.Option[_root_.java.util.UUID], organization_key: String, application_key: String)
POST       /watches                                            controllers.Watches.post()
DELETE     /watches/:guid                                      controllers.Watches.deleteByGuid(guid: _root_.java.util.UUID)
GET        /:orgKey                                            controllers.Applications.getByOrgKey(orgKey: String, name: _root_.scala.Option[String], key: _root_.scala.Option[String], limit: Long ?= 25, offset: Long ?= 0)
POST       /:orgKey                                            controllers.Applications.postByOrgKey(orgKey: String)
PUT        /:orgKey/:applicationKey                            controllers.Applications.putByOrgKeyAndApplicationKey(orgKey: String, applicationKey: String)
DELETE     /:orgKey/:applicationKey                            controllers.Applications.deleteByOrgKeyAndApplicationKey(orgKey: String, applicationKey: String)
GET        /:orgKey/:applicationKey/:version/:generatorKey     controllers.Code.getByOrgKeyAndApplicationKeyAndVersionAndGeneratorKey(orgKey: String, applicationKey: String, version: String, generatorKey: String)
GET        /:orgKey/:applicationKey                            controllers.Versions.getByOrgKeyAndApplicationKey(orgKey: String, applicationKey: String, limit: Long ?= 25, offset: Long ?= 0)
GET        /:orgKey/:applicationKey/:version                   controllers.Versions.getByOrgKeyAndApplicationKeyAndVersion(orgKey: String, applicationKey: String, version: String)
POST       /:orgKey/:version                                   controllers.Versions.postByOrgKeyAndVersion(orgKey: String, version: String)
PUT        /:orgKey/:applicationKey/:version                   controllers.Versions.putByOrgKeyAndApplicationKeyAndVersion(orgKey: String, applicationKey: String, version: String)
DELETE     /:orgKey/:applicationKey/:version                   controllers.Versions.deleteByOrgKeyAndApplicationKeyAndVersion(orgKey: String, applicationKey: String, version: String)