  object User {

    sealed trait AgeGroup

    object AgeGroup {

      case object Twenties extends AgeGroup { override def toString = "twenties" }
      case object Thirties extends AgeGroup { override def toString = "thirties" }

      /**
       * UNDEFINED captures values that are sent either in error or
       * that were added by the server after this library was
       * generated. We want to make it easy and obvious for users of
       * this library to handle this case gracefully.
       *
       * We use all CAPS for the variable name to avoid collisions
       * with the camel cased values above.
       */
      case class UNDEFINED(override val toString: String) extends AgeGroup

      /**
       * all returns a list of all the valid, known values. We use
       * lower case to avoid collisions with the camel cased values
       * above.
       */
      val all = Seq(Twenties, Thirties)

      private[this]
      val byName = all.map(x => x.toString -> x).toMap

      def apply(value: String): AgeGroup = byName.get(value).getOrElse(UNDEFINED(value))

    }

    sealed trait PartyTheme

    object PartyTheme {

      case object Twenties extends PartyTheme { override def toString = "twenties" }
      case object Thirties extends PartyTheme { override def toString = "thirties" }

      /**
       * UNDEFINED captures values that are sent either in error or
       * that were added by the server after this library was
       * generated. We want to make it easy and obvious for users of
       * this library to handle this case gracefully.
       *
       * We use all CAPS for the variable name to avoid collisions
       * with the camel cased values above.
       */
      case class UNDEFINED(override val toString: String) extends PartyTheme

      /**
       * all returns a list of all the valid, known values. We use
       * lower case to avoid collisions with the camel cased values
       * above.
       */
      val all = Seq(Twenties, Thirties)

      private[this]
      val byName = all.map(x => x.toString -> x).toMap

      def apply(value: String): PartyTheme = byName.get(value).getOrElse(UNDEFINED(value))

    }
  }
